{"file_contents":{"replit.md":{"content":"# VisaGuardAI\n\n## Overview\n\nVisaGuardAI is a modern SaaS application that helps users scan their online presence for potential visa application risks. The platform analyzes social media accounts and provides risk assessments to help users identify content that might negatively impact their visa applications. Built as a client-side application using HTML5, Tailwind CSS, and Vanilla JavaScript, it features user authentication, a comprehensive dashboard, payment integration, and responsive design with dark/light theme support.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n**Client-Side SPA**: Built entirely with vanilla HTML5, CSS3, and JavaScript without any frameworks. Uses a multi-page approach with separate HTML files for different sections (landing, login, dashboard, payment).\n\n**Styling Framework**: Tailwind CSS via CDN for rapid UI development and consistent design system. Custom CSS animations and themes are layered on top for enhanced user experience.\n\n**State Management**: Browser LocalStorage handles all client-side data persistence including user authentication state, theme preferences, user profiles, and payment status.\n\n### Authentication System\n**Client-Side Authentication**: Simple email/password authentication system stored in LocalStorage. Includes user registration, login/logout functionality, and session persistence.\n\n**Access Control**: Route protection using JavaScript to redirect unauthorized users to login page. Dashboard access requires valid authentication state.\n\n### Data Storage\n**LocalStorage Schema**: \n- User accounts with email, password, profile data, and payment status\n- Connected social media accounts tracking\n- Theme preferences and UI state\n- Analysis results and risk assessments\n\n### User Interface Design\n**Responsive Design**: Mobile-first approach using Tailwind's responsive utilities. Fully functional across desktop, tablet, and mobile devices.\n\n**Theme System**: Persistent dark/light mode toggle with system preference detection. Theme state maintained across sessions and page refreshes.\n\n**Component Architecture**: Modular JavaScript classes for different functional areas (AuthManager, Dashboard, ThemeManager) promoting code reusability and maintainability.\n\n### Application Flow\n**Freemium Model**: Free tier provides limited analysis results, paid tier unlocks full analytics and features. Payment status tracked in user profile data.\n\n**Progressive Enhancement**: JavaScript-driven interactions with graceful fallbacks. CSS animations and transitions provide smooth user experience.\n\n### Security Considerations\n**Client-Side Limitations**: All data stored in browser LocalStorage - suitable for demo/prototype but not production security. No server-side validation or encryption.\n\n## External Dependencies\n\n### CDN Resources\n- **Tailwind CSS**: Main styling framework via CDN\n- **Font Awesome 6.0.0**: Icon library for UI elements\n- **Google Fonts**: Typography (if used)\n\n### Payment Integration\n**Dummy Payment System**: Simulated payment flow for demonstration purposes. Updates user payment status in LocalStorage upon completion.\n\n### Social Media Integration\n**Placeholder Connections**: Mock social media account linking (Instagram, TikTok, LinkedIn, Twitter) for demonstration of analysis features.\n\n### Browser APIs\n- **LocalStorage API**: Primary data persistence layer\n- **Window.matchMedia**: System theme preference detection\n- **DOM API**: All user interface interactions and updates","size_bytes":3562},"assets/auth.js":{"content":"// Authentication system\n\nclass AuthManager {\n    constructor() {\n        this.init();\n    }\n    \n    init() {\n        // Initialize users array if it doesn't exist\n        if (!localStorage.getItem('users')) {\n            localStorage.setItem('users', JSON.stringify([]));\n        }\n    }\n    \n    signupUser(email, password, confirmPassword) {\n        // Validation\n        if (!email || !password || !confirmPassword) {\n            throw new Error('All fields are required');\n        }\n        \n        if (password.length < 8) {\n            throw new Error('Password must be at least 8 characters long');\n        }\n        \n        if (password !== confirmPassword) {\n            throw new Error('Passwords do not match');\n        }\n        \n        if (!this.isValidEmail(email)) {\n            throw new Error('Please enter a valid email address');\n        }\n        \n        // Check if user already exists\n        const users = JSON.parse(localStorage.getItem('users') || '[]');\n        if (users.find(user => user.email === email)) {\n            throw new Error('An account with this email already exists');\n        }\n        \n        // Create new user\n        const newUser = {\n            email,\n            password, // In a real app, this would be hashed\n            isPaid: false,\n            createdAt: new Date().toISOString(),\n            profile: {\n                name: '',\n                country: '',\n                university: ''\n            },\n            connectedAccounts: {\n                instagram: false,\n                tiktok: false,\n                linkedin: false,\n                twitter: false\n            }\n        };\n        \n        users.push(newUser);\n        localStorage.setItem('users', JSON.stringify(users));\n        \n        return newUser;\n    }\n    \n    loginUser(email, password) {\n        if (!email || !password) {\n            throw new Error('Email and password are required');\n        }\n        \n        const users = JSON.parse(localStorage.getItem('users') || '[]');\n        const user = users.find(u => u.email === email && u.password === password);\n        \n        if (!user) {\n            throw new Error('Invalid email or password');\n        }\n        \n        // Set current user session\n        localStorage.setItem('currentUser', email);\n        localStorage.setItem('userPaidStatus', user.isPaid.toString());\n        \n        return user;\n    }\n    \n    logoutUser() {\n        localStorage.removeItem('currentUser');\n        localStorage.removeItem('userPaidStatus');\n        window.location.href = 'index.html';\n    }\n    \n    getCurrentUser() {\n        const currentUserEmail = localStorage.getItem('currentUser');\n        if (!currentUserEmail) return null;\n        \n        const users = JSON.parse(localStorage.getItem('users') || '[]');\n        return users.find(user => user.email === currentUserEmail);\n    }\n    \n    updateUser(userData) {\n        const users = JSON.parse(localStorage.getItem('users') || '[]');\n        const currentUserEmail = localStorage.getItem('currentUser');\n        \n        const userIndex = users.findIndex(user => user.email === currentUserEmail);\n        if (userIndex !== -1) {\n            users[userIndex] = { ...users[userIndex], ...userData };\n            localStorage.setItem('users', JSON.stringify(users));\n            return users[userIndex];\n        }\n        \n        throw new Error('User not found');\n    }\n    \n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n    \n    isAuthenticated() {\n        return !!localStorage.getItem('currentUser');\n    }\n    \n    requireAuth() {\n        if (!this.isAuthenticated()) {\n            window.location.href = 'login.html';\n            return false;\n        }\n        return true;\n    }\n}\n\n// Initialize auth manager\nconst authManager = new AuthManager();\n\n// Authentication form handlers\nfunction handleLogin(event) {\n    event.preventDefault();\n    \n    const email = document.getElementById('login-email').value;\n    const password = document.getElementById('login-password').value;\n    \n    try {\n        authManager.loginUser(email, password);\n        showMessage('Login successful! Redirecting...', 'success');\n        \n        setTimeout(() => {\n            window.location.href = 'dashboard.html';\n        }, 1000);\n        \n    } catch (error) {\n        showMessage(error.message, 'error');\n    }\n}\n\nfunction handleSignup(event) {\n    event.preventDefault();\n    \n    const email = document.getElementById('signup-email').value;\n    const password = document.getElementById('signup-password').value;\n    const confirmPassword = document.getElementById('confirm-password').value;\n    \n    try {\n        authManager.signupUser(email, password, confirmPassword);\n        showMessage('Account created successfully! Please sign in.', 'success');\n        \n        // Switch to login tab\n        setTimeout(() => {\n            document.getElementById('login-tab').click();\n            document.getElementById('login-email').value = email;\n        }, 1000);\n        \n    } catch (error) {\n        showMessage(error.message, 'error');\n    }\n}\n\nfunction logout() {\n    authManager.logoutUser();\n}\n\n// Message display function\nfunction showMessage(message, type = 'info') {\n    const container = document.getElementById('message-container');\n    if (!container) return;\n    \n    const messageDiv = document.createElement('div');\n    \n    const colors = {\n        success: 'bg-green-100 dark:bg-green-900 border-green-400 dark:border-green-600 text-green-700 dark:text-green-200',\n        error: 'bg-red-100 dark:bg-red-900 border-red-400 dark:border-red-600 text-red-700 dark:text-red-200',\n        info: 'bg-blue-100 dark:bg-blue-900 border-blue-400 dark:border-blue-600 text-blue-700 dark:text-blue-200'\n    };\n    \n    messageDiv.className = `${colors[type]} border px-4 py-3 rounded mb-4 shadow-lg transition-all duration-300 transform translate-x-0`;\n    messageDiv.innerHTML = `\n        <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm font-medium\">${message}</span>\n            <button onclick=\"this.parentElement.parentElement.remove()\" class=\"ml-2 text-lg leading-none hover:opacity-75\">\n                <i class=\"fas fa-times\"></i>\n            </button>\n        </div>\n    `;\n    \n    // Add animation\n    messageDiv.style.transform = 'translateX(100%)';\n    container.appendChild(messageDiv);\n    \n    setTimeout(() => {\n        messageDiv.style.transform = 'translateX(0)';\n    }, 10);\n    \n    // Auto remove after 5 seconds\n    setTimeout(() => {\n        if (messageDiv.parentElement) {\n            messageDiv.style.transform = 'translateX(100%)';\n            setTimeout(() => {\n                if (messageDiv.parentElement) {\n                    messageDiv.remove();\n                }\n            }, 300);\n        }\n    }, 5000);\n}\n\n// Password strength indicator\nfunction updatePasswordStrength(password) {\n    const strengthBar = document.getElementById('password-strength');\n    if (!strengthBar) return;\n    \n    let strength = 0;\n    if (password.length >= 8) strength++;\n    if (/[A-Z]/.test(password)) strength++;\n    if (/[a-z]/.test(password)) strength++;\n    if (/[0-9]/.test(password)) strength++;\n    if (/[^A-Za-z0-9]/.test(password)) strength++;\n    \n    const colors = ['bg-red-500', 'bg-orange-500', 'bg-yellow-500', 'bg-green-500', 'bg-green-600'];\n    const widths = ['w-1/5', 'w-2/5', 'w-3/5', 'w-4/5', 'w-full'];\n    \n    strengthBar.className = `h-2 rounded-full transition-all duration-300 ${colors[strength - 1] || 'bg-gray-300'} ${widths[strength - 1] || 'w-0'}`;\n}\n\n// Add password strength indicator to signup form\ndocument.addEventListener('DOMContentLoaded', function() {\n    const signupPassword = document.getElementById('signup-password');\n    if (signupPassword) {\n        signupPassword.addEventListener('input', function() {\n            updatePasswordStrength(this.value);\n        });\n    }\n});\n","size_bytes":8007},"assets/dashboard.js":{"content":"// Dashboard functionality\n\nclass Dashboard {\n    constructor() {\n        this.currentUser = null;\n        this.connectedAccounts = {\n            instagram: false,\n            tiktok: false,\n            linkedin: false,\n            twitter: false\n        };\n        this.analysisData = null;\n        \n        this.init();\n    }\n    \n    init() {\n        // Check authentication\n        if (!authManager.requireAuth()) return;\n        \n        // Load user data\n        this.loadUserData();\n        this.bindEvents();\n        this.showSection('home');\n    }\n    \n    loadUserData() {\n        this.currentUser = authManager.getCurrentUser();\n        if (!this.currentUser) {\n            window.location.href = 'login.html';\n            return;\n        }\n        \n        // Update UI with user data\n        this.updateUserProfile();\n        this.loadConnectedAccounts();\n    }\n    \n    updateUserProfile() {\n        const userEmail = document.getElementById('user-email');\n        const userAvatar = document.getElementById('user-avatar');\n        const userStatus = document.getElementById('user-status');\n        const settingsEmail = document.getElementById('settings-email');\n        \n        if (userEmail) userEmail.textContent = this.currentUser.email;\n        if (settingsEmail) settingsEmail.value = this.currentUser.email;\n        \n        if (userAvatar) {\n            const initials = this.currentUser.email.substring(0, 2).toUpperCase();\n            userAvatar.textContent = initials;\n        }\n        \n        if (userStatus) {\n            userStatus.textContent = this.currentUser.isPaid ? 'Premium User' : 'Free Trial';\n        }\n        \n        // Load profile form data\n        if (this.currentUser.profile) {\n            const nameField = document.getElementById('user-name');\n            const countryField = document.getElementById('user-country');\n            const universityField = document.getElementById('user-university');\n            \n            if (nameField) nameField.value = this.currentUser.profile.name || '';\n            if (countryField) countryField.value = this.currentUser.profile.country || '';\n            if (universityField) universityField.value = this.currentUser.profile.university || '';\n        }\n    }\n    \n    loadConnectedAccounts() {\n        if (this.currentUser.connectedAccounts) {\n            this.connectedAccounts = { ...this.currentUser.connectedAccounts };\n        }\n        \n        // Update UI for connected accounts\n        Object.keys(this.connectedAccounts).forEach(platform => {\n            const button = document.querySelector(`[data-platform=\"${platform}\"]`);\n            if (button) {\n                const statusSpan = button.querySelector('span:last-child');\n                if (this.connectedAccounts[platform]) {\n                    button.className = button.className.replace('border-dashed border-gray-300 dark:border-gray-600', 'border-solid border-green-500 bg-green-50 dark:bg-green-900/20');\n                    if (statusSpan) statusSpan.textContent = 'Connected';\n                    if (statusSpan) statusSpan.className = 'text-xs text-green-600 dark:text-green-400 mt-1';\n                }\n            }\n        });\n        \n        this.updateStartAnalysisButton();\n    }\n    \n    updateStartAnalysisButton() {\n        const startButton = document.getElementById('start-analysis-btn');\n        if (!startButton) return;\n        \n        const connectedCount = Object.values(this.connectedAccounts).filter(Boolean).length;\n        \n        if (connectedCount > 0) {\n            startButton.disabled = false;\n            startButton.textContent = `Start Visa Risk Analysis (${connectedCount} platform${connectedCount > 1 ? 's' : ''})`;\n        } else {\n            startButton.disabled = true;\n            startButton.textContent = 'Connect at least one platform to start';\n        }\n    }\n    \n    bindEvents() {\n        // Mobile menu toggle\n        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');\n        if (mobileMenuToggle) {\n            mobileMenuToggle.addEventListener('click', () => {\n                // Implementation for mobile menu\n            });\n        }\n    }\n    \n    connectAccount(platform) {\n        // Simulate account connection\n        showMessage(`Connecting to ${platform.charAt(0).toUpperCase() + platform.slice(1)}...`, 'info');\n        \n        setTimeout(() => {\n            this.connectedAccounts[platform] = true;\n            \n            // Update user data\n            authManager.updateUser({\n                connectedAccounts: this.connectedAccounts\n            });\n            \n            // Update UI\n            const button = document.querySelector(`[data-platform=\"${platform}\"]`);\n            if (button) {\n                button.className = button.className.replace('border-dashed border-gray-300 dark:border-gray-600', 'border-solid border-green-500 bg-green-50 dark:bg-green-900/20');\n                const statusSpan = button.querySelector('span:last-child');\n                if (statusSpan) {\n                    statusSpan.textContent = 'Connected';\n                    statusSpan.className = 'text-xs text-green-600 dark:text-green-400 mt-1';\n                }\n            }\n            \n            this.updateStartAnalysisButton();\n            showMessage(`${platform.charAt(0).toUpperCase() + platform.slice(1)} connected successfully!`, 'success');\n        }, 1500);\n    }\n    \n    startAnalysis() {\n        const connectedCount = Object.values(this.connectedAccounts).filter(Boolean).length;\n        if (connectedCount === 0) {\n            showMessage('Please connect at least one social media platform', 'error');\n            return;\n        }\n        \n        // Show loading modal\n        this.showLoadingModal();\n        \n        // Simulate analysis process\n        this.runAnalysisSimulation();\n    }\n    \n    showLoadingModal() {\n        const modal = document.getElementById('loading-modal');\n        if (modal) {\n            modal.classList.remove('hidden');\n        }\n    }\n    \n    hideLoadingModal() {\n        const modal = document.getElementById('loading-modal');\n        if (modal) {\n            modal.classList.add('hidden');\n        }\n    }\n    \n    runAnalysisSimulation() {\n        const messages = [\n            \"Connecting to platforms...\",\n            \"Analyzing Instagram posts...\",\n            \"Scanning TikTok content...\",\n            \"Reviewing LinkedIn profile...\",\n            \"Examining Twitter activity...\",\n            \"Processing image content...\",\n            \"Analyzing language patterns...\",\n            \"Checking location data...\",\n            \"Compiling risk assessment...\",\n            \"Generating recommendations...\"\n        ];\n        \n        let currentMessage = 0;\n        let progress = 0;\n        \n        const updateProgress = () => {\n            const messageElement = document.getElementById('loading-message');\n            const progressBar = document.getElementById('progress-bar');\n            \n            if (messageElement && currentMessage < messages.length) {\n                messageElement.textContent = messages[currentMessage];\n            }\n            \n            if (progressBar) {\n                progress += 10;\n                progressBar.style.width = `${Math.min(progress, 100)}%`;\n            }\n            \n            currentMessage++;\n            \n            if (currentMessage <= messages.length) {\n                setTimeout(updateProgress, 800);\n            } else {\n                // Analysis complete\n                setTimeout(() => {\n                    this.hideLoadingModal();\n                    this.showAnalysisResults();\n                }, 1000);\n            }\n        };\n        \n        updateProgress();\n    }\n    \n    showAnalysisResults() {\n        // Generate mock analysis data\n        this.generateAnalysisData();\n        \n        // Show results section\n        const resultsSection = document.getElementById('analysis-results');\n        if (resultsSection) {\n            resultsSection.classList.remove('hidden');\n        }\n        \n        // Show appropriate results based on payment status\n        if (this.currentUser.isPaid) {\n            this.showFullResults();\n        } else {\n            this.showFreeTrialResults();\n        }\n        \n        // Scroll to results\n        resultsSection.scrollIntoView({ behavior: 'smooth' });\n        \n        showMessage('Analysis complete! Review your results below.', 'success');\n    }\n    \n    generateAnalysisData() {\n        const platforms = Object.keys(this.connectedAccounts).filter(p => this.connectedAccounts[p]);\n        \n        this.analysisData = {\n            overallRisk: Math.floor(Math.random() * 30) + 10, // 10-40% risk\n            approvalChance: Math.floor(Math.random() * 20) + 75, // 75-95% approval\n            postsAnalyzed: Math.floor(Math.random() * 500) + 300,\n            flaggedItems: Math.floor(Math.random() * 5) + 1,\n            platforms: platforms.map(platform => ({\n                name: platform,\n                risk: Math.floor(Math.random() * 60) + 10,\n                posts: Math.floor(Math.random() * 200) + 50\n            })),\n            categories: [\n                { name: 'Political Content', risk: Math.floor(Math.random() * 30) + 5 },\n                { name: 'Language Issues', risk: Math.floor(Math.random() * 25) + 10 },\n                { name: 'Location Concerns', risk: Math.floor(Math.random() * 20) + 5 },\n                { name: 'Professional Image', risk: Math.floor(Math.random() * 35) + 15 },\n                { name: 'Cultural Sensitivity', risk: Math.floor(Math.random() * 40) + 10 }\n            ],\n            flaggedContent: [\n                {\n                    platform: 'Instagram',\n                    content: 'Post about political rally attendance',\n                    risk: 'Medium',\n                    date: '2024-12-15'\n                },\n                {\n                    platform: 'Twitter',\n                    content: 'Tweet with strong political opinion',\n                    risk: 'High',\n                    date: '2024-12-10'\n                },\n                {\n                    platform: 'LinkedIn',\n                    content: 'Comment on controversial topic',\n                    risk: 'Low',\n                    date: '2024-12-08'\n                }\n            ]\n        };\n    }\n    \n    showFreeTrialResults() {\n        const freeResults = document.getElementById('free-trial-results');\n        const fullResults = document.getElementById('full-results');\n        \n        if (freeResults) freeResults.classList.remove('hidden');\n        if (fullResults) fullResults.classList.add('hidden');\n    }\n    \n    showFullResults() {\n        const freeResults = document.getElementById('free-trial-results');\n        const fullResults = document.getElementById('full-results');\n        \n        if (freeResults) freeResults.classList.add('hidden');\n        if (fullResults) fullResults.classList.remove('hidden');\n        \n        this.populateFullResults();\n    }\n    \n    populateFullResults() {\n        if (!this.analysisData) return;\n        \n        // Update risk score\n        const riskScore = document.getElementById('risk-score');\n        const riskCircle = document.getElementById('risk-circle');\n        \n        if (riskScore) {\n            riskScore.textContent = `${this.analysisData.overallRisk}%`;\n            \n            // Update color based on risk level\n            if (this.analysisData.overallRisk < 30) {\n                riskScore.className = 'text-3xl font-bold text-green-600';\n            } else if (this.analysisData.overallRisk < 60) {\n                riskScore.className = 'text-3xl font-bold text-yellow-600';\n            } else {\n                riskScore.className = 'text-3xl font-bold text-red-600';\n            }\n        }\n        \n        if (riskCircle) {\n            const circumference = 2 * Math.PI * 40; // radius = 40\n            const offset = circumference - (this.analysisData.overallRisk / 100) * circumference;\n            riskCircle.style.strokeDashoffset = offset;\n            \n            // Update stroke color\n            if (this.analysisData.overallRisk < 30) {\n                riskCircle.setAttribute('stroke', '#10b981');\n            } else if (this.analysisData.overallRisk < 60) {\n                riskCircle.setAttribute('stroke', '#f59e0b');\n            } else {\n                riskCircle.setAttribute('stroke', '#ef4444');\n            }\n        }\n        \n        // Populate platform analysis\n        this.populatePlatformAnalysis();\n        \n        // Populate risk categories\n        this.populateRiskCategories();\n        \n        // Populate flagged content\n        this.populateFlaggedContent();\n    }\n    \n    populatePlatformAnalysis() {\n        const container = document.getElementById('platform-analysis');\n        if (!container) return;\n        \n        container.innerHTML = '';\n        \n        this.analysisData.platforms.forEach(platform => {\n            const riskLevel = platform.risk < 30 ? 'Low' : platform.risk < 60 ? 'Moderate' : 'High';\n            const riskColor = platform.risk < 30 ? 'green' : platform.risk < 60 ? 'yellow' : 'red';\n            const iconClass = this.getPlatformIcon(platform.name);\n            \n            const div = document.createElement('div');\n            div.className = 'flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg';\n            div.innerHTML = `\n                <div class=\"flex items-center space-x-4\">\n                    <i class=\"${iconClass}\"></i>\n                    <div>\n                        <h4 class=\"font-medium text-gray-900 dark:text-white\">${platform.name.charAt(0).toUpperCase() + platform.name.slice(1)}</h4>\n                        <p class=\"text-sm text-gray-600 dark:text-gray-400\">${platform.posts} posts analyzed</p>\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-3\">\n                    <div class=\"w-32 bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                        <div class=\"bg-${riskColor}-500 h-2 rounded-full\" style=\"width: ${platform.risk}%\"></div>\n                    </div>\n                    <span class=\"text-sm font-medium text-${riskColor}-600\">${riskLevel}</span>\n                </div>\n            `;\n            \n            container.appendChild(div);\n        });\n    }\n    \n    populateRiskCategories() {\n        const container = document.getElementById('risk-categories');\n        if (!container) return;\n        \n        container.innerHTML = '';\n        \n        this.analysisData.categories.forEach(category => {\n            const riskColor = category.risk < 20 ? 'green' : category.risk < 40 ? 'yellow' : 'red';\n            \n            const div = document.createElement('div');\n            div.className = `p-4 bg-${riskColor}-50 dark:bg-${riskColor}-900/20 rounded-lg border border-${riskColor}-200 dark:border-${riskColor}-700`;\n            div.innerHTML = `\n                <h4 class=\"font-medium text-gray-900 dark:text-white mb-2\">${category.name}</h4>\n                <div class=\"flex items-center justify-between\">\n                    <div class=\"w-16 bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                        <div class=\"bg-${riskColor}-500 h-2 rounded-full\" style=\"width: ${category.risk * 2}%\"></div>\n                    </div>\n                    <span class=\"text-sm font-bold text-${riskColor}-600\">${category.risk}%</span>\n                </div>\n            `;\n            \n            container.appendChild(div);\n        });\n    }\n    \n    populateFlaggedContent() {\n        const container = document.getElementById('flagged-content');\n        if (!container) return;\n        \n        container.innerHTML = '';\n        \n        this.analysisData.flaggedContent.forEach(item => {\n            const riskColor = item.risk === 'Low' ? 'green' : item.risk === 'Medium' ? 'yellow' : 'red';\n            const iconClass = this.getPlatformIcon(item.platform.toLowerCase());\n            \n            const div = document.createElement('div');\n            div.className = 'p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600';\n            div.innerHTML = `\n                <div class=\"flex items-start justify-between\">\n                    <div class=\"flex items-start space-x-3\">\n                        <i class=\"${iconClass}\"></i>\n                        <div>\n                            <p class=\"text-sm font-medium text-gray-900 dark:text-white\">${item.content}</p>\n                            <p class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">${item.date}</p>\n                        </div>\n                    </div>\n                    <span class=\"px-2 py-1 bg-${riskColor}-100 dark:bg-${riskColor}-900/20 text-${riskColor}-700 dark:text-${riskColor}-300 text-xs font-medium rounded\">${item.risk} Risk</span>\n                </div>\n            `;\n            \n            container.appendChild(div);\n        });\n    }\n    \n    getPlatformIcon(platform) {\n        const icons = {\n            instagram: 'fab fa-instagram text-pink-500',\n            tiktok: 'fab fa-tiktok text-black dark:text-white',\n            linkedin: 'fab fa-linkedin text-blue-600',\n            twitter: 'fab fa-twitter text-blue-400'\n        };\n        \n        return icons[platform] || 'fas fa-globe text-gray-500';\n    }\n    \n    showSection(sectionName) {\n        // Hide all sections\n        document.querySelectorAll('.section').forEach(section => {\n            section.classList.add('hidden');\n        });\n        \n        // Show selected section\n        const targetSection = document.getElementById(`${sectionName}-section`);\n        if (targetSection) {\n            targetSection.classList.remove('hidden');\n        }\n        \n        // Update navigation\n        document.querySelectorAll('.nav-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        \n        const activeNav = document.querySelector(`[onclick=\"showSection('${sectionName}')\"]`);\n        if (activeNav) {\n            activeNav.classList.add('active');\n        }\n        \n        // Update section title\n        const sectionTitle = document.getElementById('section-title');\n        if (sectionTitle) {\n            const titles = {\n                home: 'Dashboard',\n                results: 'My Results',\n                settings: 'Settings'\n            };\n            sectionTitle.textContent = titles[sectionName] || 'Dashboard';\n        }\n        \n        // Load section-specific data\n        if (sectionName === 'results') {\n            this.loadResultsHistory();\n        }\n    }\n    \n    loadResultsHistory() {\n        const container = document.getElementById('results-history');\n        if (!container) return;\n        \n        // Mock results history\n        const history = [\n            {\n                date: '2024-01-28',\n                risk: 'Low',\n                platforms: 3,\n                status: 'Complete'\n            },\n            {\n                date: '2024-01-15',\n                risk: 'Medium',\n                platforms: 2,\n                status: 'Complete'\n            }\n        ];\n        \n        container.innerHTML = '';\n        \n        if (history.length === 0) {\n            container.innerHTML = `\n                <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                    <i class=\"fas fa-chart-line text-4xl mb-4\"></i>\n                    <p>No analysis history yet</p>\n                    <p class=\"text-sm\">Your completed analyses will appear here</p>\n                </div>\n            `;\n            return;\n        }\n        \n        history.forEach(result => {\n            const riskColor = result.risk === 'Low' ? 'green' : result.risk === 'Medium' ? 'yellow' : 'red';\n            \n            const div = document.createElement('div');\n            div.className = 'p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 hover:shadow-md transition-shadow cursor-pointer';\n            div.innerHTML = `\n                <div class=\"flex items-center justify-between\">\n                    <div>\n                        <p class=\"font-medium text-gray-900 dark:text-white\">Analysis - ${result.date}</p>\n                        <p class=\"text-sm text-gray-600 dark:text-gray-400\">${result.platforms} platforms analyzed</p>\n                    </div>\n                    <div class=\"text-right\">\n                        <span class=\"px-2 py-1 bg-${riskColor}-100 dark:bg-${riskColor}-900/20 text-${riskColor}-700 dark:text-${riskColor}-300 text-xs font-medium rounded\">${result.risk} Risk</span>\n                        <p class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">${result.status}</p>\n                    </div>\n                </div>\n            `;\n            \n            container.appendChild(div);\n        });\n    }\n    \n    saveProfile() {\n        const name = document.getElementById('user-name').value;\n        const country = document.getElementById('user-country').value;\n        const university = document.getElementById('user-university').value;\n        \n        try {\n            authManager.updateUser({\n                profile: {\n                    name,\n                    country,\n                    university\n                }\n            });\n            \n            showMessage('Profile updated successfully!', 'success');\n        } catch (error) {\n            showMessage('Failed to update profile', 'error');\n        }\n    }\n    \n    changePassword() {\n        showMessage('Password change functionality coming soon!', 'info');\n    }\n    \n    downloadData() {\n        showMessage('Data export initiated. You will receive an email shortly.', 'success');\n    }\n    \n    deleteAccount() {\n        if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {\n            showMessage('Account deletion requested. Please check your email to confirm.', 'info');\n        }\n    }\n    \n    downloadReport() {\n        showMessage('Generating PDF report... Download will start shortly.', 'success');\n        \n        // Simulate PDF generation\n        setTimeout(() => {\n            const link = document.createElement('a');\n            link.href = '#';\n            link.download = 'visa-risk-analysis-report.pdf';\n            link.textContent = 'Download PDF Report';\n            \n            showMessage('Report generated successfully!', 'success');\n        }, 2000);\n    }\n}\n\n// Global functions for HTML onclick handlers\nfunction showSection(sectionName) {\n    if (window.dashboard) {\n        window.dashboard.showSection(sectionName);\n    }\n}\n\nfunction connectAccount(platform) {\n    if (window.dashboard) {\n        window.dashboard.connectAccount(platform);\n    }\n}\n\nfunction startAnalysis() {\n    if (window.dashboard) {\n        window.dashboard.startAnalysis();\n    }\n}\n\nfunction saveProfile() {\n    if (window.dashboard) {\n        window.dashboard.saveProfile();\n    }\n}\n\nfunction changePassword() {\n    if (window.dashboard) {\n        window.dashboard.changePassword();\n    }\n}\n\nfunction downloadData() {\n    if (window.dashboard) {\n        window.dashboard.downloadData();\n    }\n}\n\nfunction deleteAccount() {\n    if (window.dashboard) {\n        window.dashboard.deleteAccount();\n    }\n}\n\nfunction downloadReport() {\n    if (window.dashboard) {\n        window.dashboard.downloadReport();\n    }\n}\n\n// Initialize dashboard when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.dashboard = new Dashboard();\n});\n","size_bytes":23641},"assets/script.js":{"content":"// Landing page functionality\n\nfunction startFreeScan() {\n    window.location.href = 'login.html';\n}\n\n// Mobile menu toggle\ndocument.getElementById('mobile-menu-button').addEventListener('click', function() {\n    const mobileMenu = document.getElementById('mobile-menu');\n    mobileMenu.classList.toggle('hidden');\n});\n\n// FAQ functionality\nfunction toggleFaq(element) {\n    const answer = element.parentElement.querySelector('.faq-answer');\n    const icon = element.querySelector('i');\n    \n    if (answer.classList.contains('hidden')) {\n        answer.classList.remove('hidden');\n        icon.style.transform = 'rotate(180deg)';\n    } else {\n        answer.classList.add('hidden');\n        icon.style.transform = 'rotate(0deg)';\n    }\n}\n\n// Smooth scrolling for anchor links\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function (e) {\n        e.preventDefault();\n        const target = document.querySelector(this.getAttribute('href'));\n        if (target) {\n            target.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        }\n    });\n});\n\n// Animation on scroll\nfunction animateOnScroll() {\n    const elements = document.querySelectorAll('.feature-card');\n    const windowHeight = window.innerHeight;\n    \n    elements.forEach(element => {\n        const elementTop = element.getBoundingClientRect().top;\n        \n        if (elementTop < windowHeight - 100) {\n            element.style.opacity = '1';\n            element.style.transform = 'translateY(0)';\n        }\n    });\n}\n\n// Initialize animations\nwindow.addEventListener('scroll', animateOnScroll);\nwindow.addEventListener('load', animateOnScroll);\n\n// Set initial opacity for animated elements\ndocument.addEventListener('DOMContentLoaded', function() {\n    const elements = document.querySelectorAll('.feature-card');\n    elements.forEach(element => {\n        element.style.opacity = '0';\n        element.style.transform = 'translateY(20px)';\n        element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\n    });\n});\n","size_bytes":2106},"assets/styles.css":{"content":"/* Custom styles and animations for VisaGuardAI */\n\n/* Custom animations */\n@keyframes fade-in-up {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes fade-in {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n@keyframes slide-up {\n    from {\n        transform: translateY(20px);\n        opacity: 0;\n    }\n    to {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n@keyframes pulse-glow {\n    0%, 100% {\n        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);\n    }\n    50% {\n        box-shadow: 0 0 20px rgba(59, 130, 246, 0.8);\n    }\n}\n\n@keyframes gradient-shift {\n    0% {\n        background-position: 0% 50%;\n    }\n    50% {\n        background-position: 100% 50%;\n    }\n    100% {\n        background-position: 0% 50%;\n    }\n}\n\n/* Animation classes */\n.animate-fade-in-up {\n    animation: fade-in-up 0.8s ease-out forwards;\n}\n\n.animate-fade-in {\n    animation: fade-in 0.6s ease-out forwards;\n}\n\n.animate-slide-up {\n    animation: slide-up 0.6s ease-out forwards;\n}\n\n.animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n}\n\n.animate-gradient {\n    background-size: 400% 400%;\n    animation: gradient-shift 6s ease infinite;\n}\n\n/* Animation delays */\n.animation-delay-100 {\n    animation-delay: 0.1s;\n}\n\n.animation-delay-200 {\n    animation-delay: 0.2s;\n}\n\n.animation-delay-300 {\n    animation-delay: 0.3s;\n}\n\n.animation-delay-400 {\n    animation-delay: 0.4s;\n}\n\n.animation-delay-500 {\n    animation-delay: 0.5s;\n}\n\n/* Smooth transitions */\n* {\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f5f9;\n}\n\n.dark ::-webkit-scrollbar-track {\n    background: #1e293b;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #cbd5e1;\n    border-radius: 4px;\n}\n\n.dark ::-webkit-scrollbar-thumb {\n    background: #475569;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #94a3b8;\n}\n\n.dark ::-webkit-scrollbar-thumb:hover {\n    background: #64748b;\n}\n\n/* Backdrop blur support */\n.backdrop-blur-lg {\n    backdrop-filter: blur(16px);\n}\n\n/* Custom gradients */\n.gradient-primary {\n    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n}\n\n.gradient-hero {\n    background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 50%, #e0e7ff 100%);\n}\n\n.dark .gradient-hero {\n    background: linear-gradient(135deg, #1e293b 0%, #1e40af 50%, #312e81 100%);\n}\n\n/* Loading spinner */\n@keyframes spin {\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n.animate-spin {\n    animation: spin 1s linear infinite;\n}\n\n/* Feature cards hover effects */\n.feature-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.feature-card:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n.dark .feature-card:hover {\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.4);\n}\n\n/* Navigation active state */\n.nav-item {\n    transition: all 0.2s ease;\n    color: #6b7280;\n}\n\n.dark .nav-item {\n    color: #9ca3af;\n}\n\n.nav-item:hover {\n    color: #374151;\n    background-color: #f3f4f6;\n}\n\n.dark .nav-item:hover {\n    color: #d1d5db;\n    background-color: #374151;\n}\n\n.nav-item.active {\n    color: #3b82f6;\n    background-color: #eff6ff;\n}\n\n.dark .nav-item.active {\n    color: #60a5fa;\n    background-color: #1e3a8a;\n}\n\n/* Form inputs focus states */\ninput:focus,\nselect:focus,\ntextarea:focus {\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.dark input:focus,\n.dark select:focus,\n.dark textarea:focus {\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);\n}\n\n/* Button hover effects */\nbutton {\n    transition: all 0.2s ease;\n}\n\nbutton:hover {\n    transform: translateY(-1px);\n}\n\nbutton:active {\n    transform: translateY(0);\n}\n\n/* Risk gauge animation */\n.risk-gauge circle {\n    transition: stroke-dashoffset 1s ease-in-out;\n}\n\n/* Platform connection animation */\n.connect-btn {\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.connect-btn:hover {\n    transform: scale(1.02);\n}\n\n.connect-btn::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    background: rgba(59, 130, 246, 0.1);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    transition: width 0.6s, height 0.6s;\n}\n\n.connect-btn:active::after {\n    width: 300px;\n    height: 300px;\n}\n\n/* Loading modal animations */\n.modal-enter {\n    animation: modal-enter 0.3s ease-out;\n}\n\n@keyframes modal-enter {\n    from {\n        opacity: 0;\n        transform: scale(0.9) translateY(-50px);\n    }\n    to {\n        opacity: 1;\n        transform: scale(1) translateY(0);\n    }\n}\n\n/* Progress bar animation */\n.progress-bar {\n    transition: width 0.5s ease-in-out;\n}\n\n/* Message animations */\n.message-slide-in {\n    animation: message-slide-in 0.3s ease-out;\n}\n\n@keyframes message-slide-in {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* FAQ accordion animations */\n.faq-answer {\n    transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;\n    overflow: hidden;\n}\n\n.faq-question i {\n    transition: transform 0.3s ease;\n}\n\n/* Hover effects for cards */\n.card-hover {\n    transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n}\n\n.dark .card-hover:hover {\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n}\n\n/* Skeleton loading animation */\n@keyframes skeleton-loading {\n    0% {\n        background-position: -200px 0;\n    }\n    100% {\n        background-position: calc(200px + 100%) 0;\n    }\n}\n\n.skeleton {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200px 100%;\n    animation: skeleton-loading 1.5s infinite;\n}\n\n.dark .skeleton {\n    background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);\n    background-size: 200px 100%;\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n    .mobile-hidden {\n        display: none;\n    }\n    \n    .mobile-full {\n        width: 100%;\n    }\n    \n    .mobile-text-center {\n        text-align: center;\n    }\n}\n\n/* Print styles */\n@media print {\n    .no-print {\n        display: none !important;\n    }\n    \n    .print-break-before {\n        page-break-before: always;\n    }\n    \n    .print-break-after {\n        page-break-after: always;\n    }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .nav-item.active {\n        border: 2px solid currentColor;\n    }\n    \n    button {\n        border: 2px solid currentColor;\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n\n/* Focus visible for better accessibility */\n*:focus-visible {\n    outline: 2px solid #3b82f6;\n    outline-offset: 2px;\n}\n\n/* Custom checkbox and radio styles */\ninput[type=\"checkbox\"]:checked {\n    background-image: url(\"data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='m13.854 3.646-7.5 7.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6 10.293l7.146-7.147a.5.5 0 0 1 .708.708z'/%3e%3c/svg%3e\");\n}\n\ninput[type=\"radio\"]:checked {\n    background-image: url(\"data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='8' cy='8' r='3'/%3e%3c/svg%3e\");\n}\n\n/* Loading dots animation */\n.loading-dots::after {\n    content: '';\n    animation: loading-dots 1.5s infinite;\n}\n\n@keyframes loading-dots {\n    0%, 20% {\n        content: '.';\n    }\n    40% {\n        content: '..';\n    }\n    60%, 100% {\n        content: '...';\n    }\n}\n\n/* Utility classes for common patterns */\n.glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.dark .glass-effect {\n    background: rgba(0, 0, 0, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.text-gradient {\n    background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n/* Custom selection colors */\n::selection {\n    background-color: #3b82f6;\n    color: white;\n}\n\n::-moz-selection {\n    background-color: #3b82f6;\n    color: white;\n}\n","size_bytes":8766},"assets/theme.js":{"content":"// Theme management functionality\n\nclass ThemeManager {\n    constructor() {\n        this.init();\n        this.bindEvents();\n    }\n    \n    init() {\n        // Check for saved theme preference or default to light\n        const savedTheme = localStorage.getItem('theme');\n        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        \n        if (savedTheme) {\n            this.setTheme(savedTheme);\n        } else if (systemPrefersDark) {\n            this.setTheme('dark');\n        } else {\n            this.setTheme('light');\n        }\n    }\n    \n    setTheme(theme) {\n        const html = document.documentElement;\n        \n        if (theme === 'dark') {\n            html.classList.add('dark');\n            localStorage.setItem('theme', 'dark');\n        } else {\n            html.classList.remove('dark');\n            localStorage.setItem('theme', 'light');\n        }\n        \n        // Update all theme toggle buttons\n        this.updateToggleButtons();\n    }\n    \n    toggleTheme() {\n        const html = document.documentElement;\n        const currentTheme = html.classList.contains('dark') ? 'dark' : 'light';\n        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n        this.setTheme(newTheme);\n    }\n    \n    updateToggleButtons() {\n        const isDark = document.documentElement.classList.contains('dark');\n        \n        // Update main theme toggle\n        const themeToggle = document.getElementById('theme-toggle');\n        if (themeToggle) {\n            const moonIcon = themeToggle.querySelector('.fa-moon');\n            const sunIcon = themeToggle.querySelector('.fa-sun');\n            \n            if (moonIcon && sunIcon) {\n                if (isDark) {\n                    moonIcon.classList.add('hidden');\n                    sunIcon.classList.remove('hidden');\n                } else {\n                    moonIcon.classList.remove('hidden');\n                    sunIcon.classList.add('hidden');\n                }\n            }\n        }\n        \n        // Update sidebar theme toggle\n        const sidebarToggle = document.getElementById('theme-toggle-sidebar');\n        if (sidebarToggle) {\n            const moonIcon = sidebarToggle.querySelector('.fa-moon');\n            const sunIcon = sidebarToggle.querySelector('.fa-sun');\n            const lightText = sidebarToggle.querySelector('span:not(.dark\\\\:block)');\n            const darkText = sidebarToggle.querySelector('span.dark\\\\:block');\n            \n            if (moonIcon && sunIcon) {\n                if (isDark) {\n                    moonIcon.classList.add('hidden');\n                    sunIcon.classList.remove('hidden');\n                } else {\n                    moonIcon.classList.remove('hidden');\n                    sunIcon.classList.add('hidden');\n                }\n            }\n            \n            if (lightText && darkText) {\n                if (isDark) {\n                    lightText.classList.add('hidden');\n                    darkText.classList.remove('hidden');\n                } else {\n                    lightText.classList.remove('hidden');\n                    darkText.classList.add('hidden');\n                }\n            }\n        }\n        \n        // Update settings theme toggle\n        const settingsToggle = document.getElementById('theme-toggle-settings');\n        if (settingsToggle) {\n            const toggleSpan = settingsToggle.querySelector('span:last-child');\n            if (toggleSpan) {\n                if (isDark) {\n                    toggleSpan.classList.add('translate-x-6');\n                } else {\n                    toggleSpan.classList.remove('translate-x-6');\n                }\n            }\n        }\n    }\n    \n    bindEvents() {\n        // Bind all theme toggle buttons\n        const toggleButtons = [\n            'theme-toggle',\n            'theme-toggle-sidebar', \n            'theme-toggle-settings'\n        ];\n        \n        toggleButtons.forEach(id => {\n            const button = document.getElementById(id);\n            if (button) {\n                button.addEventListener('click', () => this.toggleTheme());\n            }\n        });\n        \n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {\n            if (!localStorage.getItem('theme')) {\n                this.setTheme(e.matches ? 'dark' : 'light');\n            }\n        });\n    }\n}\n\n// Initialize theme manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.themeManager = new ThemeManager();\n});\n\n// Also initialize immediately if DOM is already loaded\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        window.themeManager = new ThemeManager();\n    });\n} else {\n    window.themeManager = new ThemeManager();\n}\n","size_bytes":4866}}}